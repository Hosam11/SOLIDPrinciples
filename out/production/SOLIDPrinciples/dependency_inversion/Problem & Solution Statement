-> ##Dependency Inversion##

- classes should depend upon interfaces or abstract classes instead of concrete classes and functions.

- high level module must not depend on the low level module, but they should depend on abstractions.

- Abstractions should not depend on details. Details should depend on abstractions

-> Problem

- First the MySQLConnection is the low level module while the PasswordReminder is high level,
but according to the definition of D in S.O.L.I.D. which states that Depend on Abstraction
not on concretions, this snippet above violates this principle as the PasswordReminder class
is being forced to depend on the MySQLConnection class.

- Later if you were to change the database engine, you would also have to edit the PasswordReminder
 class and thus violates Open-close principle.

-> Solution

- The PasswordReminder class should not care what database your application uses,
 to fix this again we “code to an interface”, since high level and low level modules
 should depend on abstraction, we can create an interface

- The interface has a connect method and the MySQLConnection class implements this interface,
 also instead of directly type-hinting MySQLConnection class in the constructor of the
 PasswordReminder, we instead type-hint the interface and no matter the type of database your
 application uses, the PasswordReminder class can easily connect to the database without
 any problems and OCP is not violated.

 According to the little snippet above, you can now see that both the high level and low level
 modules depend on abstraction.