-> Liskov Substitution

- subtypes should be replaceable by their base types

- subclasses should be substitutable for
 their base classes.

 - subclasses should be substitutable for their base classes.

- This means that, given that class B is a subclass of class A, we should be able to pass an
object of class B to any method that expects an object of class A and the method should not
give any weird output in that case.

-ex: Dog is sub class of animal and animal has a property that it can eat
so every sub type of animal it must do the eat property (method)

-> Problem

- Our Square class extends the Rectangle class. We set height and width to the same value in
the constructor, but we do not want any client (someone who uses our class in their code)
to change height or weight in a way that can violate the square property.

- Therefore we override the setters to set both properties whenever one of them is changed.
But by doing that we have just violated the Liskov substitution principle.

- Your team's tester just came up with the testing function getAreaTest and tells you that your
getArea function fails to pass the test for square objects.

-In the first test, we create a rectangle where the width is 2 and the height is 3 and call getAreaTest. The output is 20 as expected, but things go wrong when we pass in the square. This is because the call to setHeight function in the test is setting the width as well and results in an unexpected output.

-> Solution

- use Liskov Substitution principle